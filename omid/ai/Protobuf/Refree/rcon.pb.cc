// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon.proto

#include "rcon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_game_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_game_5fevent_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SSL_Referee_Game_Event;
}  // namespace protobuf_game_5fevent_2eproto
namespace protobuf_rcon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_RefereeRemoteControlRequest_CardInfo;
}  // namespace protobuf_rcon_2eproto
namespace protobuf_referee_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_referee_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_Referee_Point;
}  // namespace protobuf_referee_2eproto
class SSL_RefereeRemoteControlRequest_CardInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_RefereeRemoteControlRequest_CardInfo>
      _instance;
} _SSL_RefereeRemoteControlRequest_CardInfo_default_instance_;
class SSL_RefereeRemoteControlRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_RefereeRemoteControlRequest>
      _instance;
} _SSL_RefereeRemoteControlRequest_default_instance_;
class SSL_RefereeRemoteControlReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_RefereeRemoteControlReply>
      _instance;
} _SSL_RefereeRemoteControlReply_default_instance_;
namespace protobuf_rcon_2eproto {
static void InitDefaultsSSL_RefereeRemoteControlRequest_CardInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_;
    new (ptr) ::SSL_RefereeRemoteControlRequest_CardInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_RefereeRemoteControlRequest_CardInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_RefereeRemoteControlRequest_CardInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_RefereeRemoteControlRequest_CardInfo}, {}};

static void InitDefaultsSSL_RefereeRemoteControlRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_RefereeRemoteControlRequest_default_instance_;
    new (ptr) ::SSL_RefereeRemoteControlRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_RefereeRemoteControlRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SSL_RefereeRemoteControlRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSSL_RefereeRemoteControlRequest}, {
      &protobuf_referee_2eproto::scc_info_SSL_Referee_Point.base,
      &protobuf_rcon_2eproto::scc_info_SSL_RefereeRemoteControlRequest_CardInfo.base,
      &protobuf_game_5fevent_2eproto::scc_info_SSL_Referee_Game_Event.base,}};

static void InitDefaultsSSL_RefereeRemoteControlReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_RefereeRemoteControlReply_default_instance_;
    new (ptr) ::SSL_RefereeRemoteControlReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_RefereeRemoteControlReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_RefereeRemoteControlReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_RefereeRemoteControlReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_RefereeRemoteControlRequest_CardInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_RefereeRemoteControlRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_RefereeRemoteControlReply.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, team_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, designated_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, last_command_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, implementation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, gameevent_),
  4,
  5,
  6,
  1,
  2,
  7,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, outcome_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SSL_RefereeRemoteControlRequest_CardInfo)},
  { 9, 22, sizeof(::SSL_RefereeRemoteControlRequest)},
  { 30, 37, sizeof(::SSL_RefereeRemoteControlReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_RefereeRemoteControlRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_RefereeRemoteControlReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "rcon.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nrcon.proto\032\rreferee.proto\032\020game_event."
      "proto\"\266\004\n\037SSL_RefereeRemoteControlReques"
      "t\022\022\n\nmessage_id\030\001 \002(\r\022!\n\005stage\030\002 \001(\0162\022.S"
      "SL_Referee.Stage\022%\n\007command\030\003 \001(\0162\024.SSL_"
      "Referee.Command\022/\n\023designated_position\030\004"
      " \001(\0132\022.SSL_Referee.Point\0227\n\004card\030\005 \001(\0132)"
      ".SSL_RefereeRemoteControlRequest.CardInf"
      "o\022\034\n\024last_command_counter\030\006 \001(\r\022\031\n\021imple"
      "mentation_id\030\007 \001(\t\022*\n\tgameEvent\030\010 \001(\0132\027."
      "SSL_Referee_Game_Event\032\345\001\n\010CardInfo\022@\n\004t"
      "ype\030\001 \002(\01622.SSL_RefereeRemoteControlRequ"
      "est.CardInfo.CardType\022@\n\004team\030\002 \002(\01622.SS"
      "L_RefereeRemoteControlRequest.CardInfo.C"
      "ardTeam\")\n\010CardType\022\017\n\013CARD_YELLOW\020\000\022\014\n\010"
      "CARD_RED\020\001\"*\n\010CardTeam\022\017\n\013TEAM_YELLOW\020\000\022"
      "\r\n\tTEAM_BLUE\020\001\"\245\002\n\035SSL_RefereeRemoteCont"
      "rolReply\022\022\n\nmessage_id\030\001 \002(\r\0227\n\007outcome\030"
      "\002 \002(\0162&.SSL_RefereeRemoteControlReply.Ou"
      "tcome\"\266\001\n\007Outcome\022\006\n\002OK\020\000\022\024\n\020MULTIPLE_AC"
      "TIONS\020\001\022\r\n\tBAD_STAGE\020\002\022\017\n\013BAD_COMMAND\020\003\022"
      "\033\n\027BAD_DESIGNATED_POSITION\020\004\022\027\n\023BAD_COMM"
      "AND_COUNTER\020\005\022\014\n\010BAD_CARD\020\006\022\017\n\013NO_MAJORI"
      "TY\020\007\022\030\n\024COMMUNICATION_FAILED\020\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rcon.proto", &protobuf_RegisterTypes);
  ::protobuf_referee_2eproto::AddDescriptors();
  ::protobuf_game_5fevent_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_rcon_2eproto
const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor() {
  protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rcon_2eproto::file_level_enum_descriptors[0];
}
bool SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CARD_YELLOW;
const SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CARD_RED;
const SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CardType_MIN;
const SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CardType_MAX;
const int SSL_RefereeRemoteControlRequest_CardInfo::CardType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor() {
  protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rcon_2eproto::file_level_enum_descriptors[1];
}
bool SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::TEAM_YELLOW;
const SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::TEAM_BLUE;
const SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::CardTeam_MIN;
const SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::CardTeam_MAX;
const int SSL_RefereeRemoteControlRequest_CardInfo::CardTeam_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlReply_Outcome_descriptor() {
  protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rcon_2eproto::file_level_enum_descriptors[2];
}
bool SSL_RefereeRemoteControlReply_Outcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::OK;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::MULTIPLE_ACTIONS;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_STAGE;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_COMMAND;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_DESIGNATED_POSITION;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_COMMAND_COUNTER;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_CARD;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::NO_MAJORITY;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::COMMUNICATION_FAILED;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::Outcome_MIN;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::Outcome_MAX;
const int SSL_RefereeRemoteControlReply::Outcome_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SSL_RefereeRemoteControlRequest_CardInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_RefereeRemoteControlRequest_CardInfo::kTypeFieldNumber;
const int SSL_RefereeRemoteControlRequest_CardInfo::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_RefereeRemoteControlRequest_CardInfo::SSL_RefereeRemoteControlRequest_CardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rcon_2eproto::scc_info_SSL_RefereeRemoteControlRequest_CardInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_RefereeRemoteControlRequest.CardInfo)
}
SSL_RefereeRemoteControlRequest_CardInfo::SSL_RefereeRemoteControlRequest_CardInfo(const SSL_RefereeRemoteControlRequest_CardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&type_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:SSL_RefereeRemoteControlRequest.CardInfo)
}

void SSL_RefereeRemoteControlRequest_CardInfo::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&type_)) + sizeof(team_));
}

SSL_RefereeRemoteControlRequest_CardInfo::~SSL_RefereeRemoteControlRequest_CardInfo() {
  // @@protoc_insertion_point(destructor:SSL_RefereeRemoteControlRequest.CardInfo)
  SharedDtor();
}

void SSL_RefereeRemoteControlRequest_CardInfo::SharedDtor() {
}

void SSL_RefereeRemoteControlRequest_CardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_RefereeRemoteControlRequest_CardInfo::descriptor() {
  ::protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rcon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_RefereeRemoteControlRequest_CardInfo& SSL_RefereeRemoteControlRequest_CardInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rcon_2eproto::scc_info_SSL_RefereeRemoteControlRequest_CardInfo.base);
  return *internal_default_instance();
}


void SSL_RefereeRemoteControlRequest_CardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_RefereeRemoteControlRequest.CardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&type_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_RefereeRemoteControlRequest_CardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_RefereeRemoteControlRequest.CardInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(value)) {
            set_type(static_cast< ::SSL_RefereeRemoteControlRequest_CardInfo_CardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(value)) {
            set_team(static_cast< ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_RefereeRemoteControlRequest.CardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_RefereeRemoteControlRequest.CardInfo)
  return false;
#undef DO_
}

void SSL_RefereeRemoteControlRequest_CardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_RefereeRemoteControlRequest.CardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_RefereeRemoteControlRequest.CardInfo)
}

::google::protobuf::uint8* SSL_RefereeRemoteControlRequest_CardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_RefereeRemoteControlRequest.CardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_RefereeRemoteControlRequest.CardInfo)
  return target;
}

size_t SSL_RefereeRemoteControlRequest_CardInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_RefereeRemoteControlRequest.CardInfo)
  size_t total_size = 0;

  if (has_type()) {
    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_team()) {
    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }

  return total_size;
}
size_t SSL_RefereeRemoteControlRequest_CardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_RefereeRemoteControlRequest.CardInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_RefereeRemoteControlRequest_CardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_RefereeRemoteControlRequest_CardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_RefereeRemoteControlRequest_CardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_RefereeRemoteControlRequest.CardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_RefereeRemoteControlRequest.CardInfo)
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlRequest_CardInfo::MergeFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_RefereeRemoteControlRequest_CardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlRequest_CardInfo::CopyFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlRequest_CardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SSL_RefereeRemoteControlRequest_CardInfo::Swap(SSL_RefereeRemoteControlRequest_CardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_RefereeRemoteControlRequest_CardInfo::InternalSwap(SSL_RefereeRemoteControlRequest_CardInfo* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_RefereeRemoteControlRequest_CardInfo::GetMetadata() const {
  protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rcon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_RefereeRemoteControlRequest::InitAsDefaultInstance() {
  ::_SSL_RefereeRemoteControlRequest_default_instance_._instance.get_mutable()->designated_position_ = const_cast< ::SSL_Referee_Point*>(
      ::SSL_Referee_Point::internal_default_instance());
  ::_SSL_RefereeRemoteControlRequest_default_instance_._instance.get_mutable()->card_ = const_cast< ::SSL_RefereeRemoteControlRequest_CardInfo*>(
      ::SSL_RefereeRemoteControlRequest_CardInfo::internal_default_instance());
  ::_SSL_RefereeRemoteControlRequest_default_instance_._instance.get_mutable()->gameevent_ = const_cast< ::SSL_Referee_Game_Event*>(
      ::SSL_Referee_Game_Event::internal_default_instance());
}
void SSL_RefereeRemoteControlRequest::clear_designated_position() {
  if (designated_position_ != NULL) designated_position_->Clear();
  clear_has_designated_position();
}
void SSL_RefereeRemoteControlRequest::clear_gameevent() {
  if (gameevent_ != NULL) gameevent_->Clear();
  clear_has_gameevent();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_RefereeRemoteControlRequest::kMessageIdFieldNumber;
const int SSL_RefereeRemoteControlRequest::kStageFieldNumber;
const int SSL_RefereeRemoteControlRequest::kCommandFieldNumber;
const int SSL_RefereeRemoteControlRequest::kDesignatedPositionFieldNumber;
const int SSL_RefereeRemoteControlRequest::kCardFieldNumber;
const int SSL_RefereeRemoteControlRequest::kLastCommandCounterFieldNumber;
const int SSL_RefereeRemoteControlRequest::kImplementationIdFieldNumber;
const int SSL_RefereeRemoteControlRequest::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_RefereeRemoteControlRequest::SSL_RefereeRemoteControlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rcon_2eproto::scc_info_SSL_RefereeRemoteControlRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_RefereeRemoteControlRequest)
}
SSL_RefereeRemoteControlRequest::SSL_RefereeRemoteControlRequest(const SSL_RefereeRemoteControlRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  implementation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_implementation_id()) {
    implementation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.implementation_id_);
  }
  if (from.has_designated_position()) {
    designated_position_ = new ::SSL_Referee_Point(*from.designated_position_);
  } else {
    designated_position_ = NULL;
  }
  if (from.has_card()) {
    card_ = new ::SSL_RefereeRemoteControlRequest_CardInfo(*from.card_);
  } else {
    card_ = NULL;
  }
  if (from.has_gameevent()) {
    gameevent_ = new ::SSL_Referee_Game_Event(*from.gameevent_);
  } else {
    gameevent_ = NULL;
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_command_counter_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(last_command_counter_));
  // @@protoc_insertion_point(copy_constructor:SSL_RefereeRemoteControlRequest)
}

void SSL_RefereeRemoteControlRequest::SharedCtor() {
  implementation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&designated_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_command_counter_) -
      reinterpret_cast<char*>(&designated_position_)) + sizeof(last_command_counter_));
}

SSL_RefereeRemoteControlRequest::~SSL_RefereeRemoteControlRequest() {
  // @@protoc_insertion_point(destructor:SSL_RefereeRemoteControlRequest)
  SharedDtor();
}

void SSL_RefereeRemoteControlRequest::SharedDtor() {
  implementation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete designated_position_;
  if (this != internal_default_instance()) delete card_;
  if (this != internal_default_instance()) delete gameevent_;
}

void SSL_RefereeRemoteControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_RefereeRemoteControlRequest::descriptor() {
  ::protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rcon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_RefereeRemoteControlRequest& SSL_RefereeRemoteControlRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rcon_2eproto::scc_info_SSL_RefereeRemoteControlRequest.base);
  return *internal_default_instance();
}


void SSL_RefereeRemoteControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_RefereeRemoteControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      implementation_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(designated_position_ != NULL);
      designated_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(card_ != NULL);
      card_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gameevent_ != NULL);
      gameevent_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_command_counter_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(last_command_counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_RefereeRemoteControlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_RefereeRemoteControlRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_Referee.Stage stage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_Referee_Stage_IsValid(value)) {
            set_stage(static_cast< ::SSL_Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_Referee.Command command = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_Referee_Command_IsValid(value)) {
            set_command(static_cast< ::SSL_Referee_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_Referee.Point designated_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_designated_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_command_counter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_last_command_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_command_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string implementation_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_implementation_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->implementation_id().data(), static_cast<int>(this->implementation_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SSL_RefereeRemoteControlRequest.implementation_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_Referee_Game_Event gameEvent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_RefereeRemoteControlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_RefereeRemoteControlRequest)
  return false;
#undef DO_
}

void SSL_RefereeRemoteControlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_RefereeRemoteControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 message_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // optional .SSL_Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage(), output);
  }

  // optional .SSL_Referee.Command command = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->command(), output);
  }

  // optional .SSL_Referee.Point designated_position = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_designated_position(), output);
  }

  // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_card(), output);
  }

  // optional uint32 last_command_counter = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_command_counter(), output);
  }

  // optional string implementation_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->implementation_id().data(), static_cast<int>(this->implementation_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_RefereeRemoteControlRequest.implementation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->implementation_id(), output);
  }

  // optional .SSL_Referee_Game_Event gameEvent = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_gameevent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_RefereeRemoteControlRequest)
}

::google::protobuf::uint8* SSL_RefereeRemoteControlRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_RefereeRemoteControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 message_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // optional .SSL_Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage(), target);
  }

  // optional .SSL_Referee.Command command = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->command(), target);
  }

  // optional .SSL_Referee.Point designated_position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_designated_position(), deterministic, target);
  }

  // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_card(), deterministic, target);
  }

  // optional uint32 last_command_counter = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_command_counter(), target);
  }

  // optional string implementation_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->implementation_id().data(), static_cast<int>(this->implementation_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_RefereeRemoteControlRequest.implementation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->implementation_id(), target);
  }

  // optional .SSL_Referee_Game_Event gameEvent = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_gameevent(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_RefereeRemoteControlRequest)
  return target;
}

size_t SSL_RefereeRemoteControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_RefereeRemoteControlRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 message_id = 1;
  if (has_message_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_id());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string implementation_id = 7;
    if (has_implementation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->implementation_id());
    }

    // optional .SSL_Referee.Point designated_position = 4;
    if (has_designated_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *designated_position_);
    }

    // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *card_);
    }

    // optional .SSL_Referee_Game_Event gameEvent = 8;
    if (has_gameevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gameevent_);
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .SSL_Referee.Stage stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional .SSL_Referee.Command command = 3;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional uint32 last_command_counter = 6;
    if (has_last_command_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_command_counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_RefereeRemoteControlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_RefereeRemoteControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_RefereeRemoteControlRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_RefereeRemoteControlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_RefereeRemoteControlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_RefereeRemoteControlRequest)
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlRequest::MergeFrom(const SSL_RefereeRemoteControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_RefereeRemoteControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_implementation_id();
      implementation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.implementation_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_designated_position()->::SSL_Referee_Point::MergeFrom(from.designated_position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_card()->::SSL_RefereeRemoteControlRequest_CardInfo::MergeFrom(from.card());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gameevent()->::SSL_Referee_Game_Event::MergeFrom(from.gameevent());
    }
    if (cached_has_bits & 0x00000010u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_command_counter_ = from.last_command_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_RefereeRemoteControlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_RefereeRemoteControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlRequest::CopyFrom(const SSL_RefereeRemoteControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_RefereeRemoteControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_designated_position()) {
    if (!this->designated_position_->IsInitialized()) return false;
  }
  if (has_card()) {
    if (!this->card_->IsInitialized()) return false;
  }
  if (has_gameevent()) {
    if (!this->gameevent_->IsInitialized()) return false;
  }
  return true;
}

void SSL_RefereeRemoteControlRequest::Swap(SSL_RefereeRemoteControlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_RefereeRemoteControlRequest::InternalSwap(SSL_RefereeRemoteControlRequest* other) {
  using std::swap;
  implementation_id_.Swap(&other->implementation_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(designated_position_, other->designated_position_);
  swap(card_, other->card_);
  swap(gameevent_, other->gameevent_);
  swap(message_id_, other->message_id_);
  swap(stage_, other->stage_);
  swap(command_, other->command_);
  swap(last_command_counter_, other->last_command_counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_RefereeRemoteControlRequest::GetMetadata() const {
  protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rcon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_RefereeRemoteControlReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_RefereeRemoteControlReply::kMessageIdFieldNumber;
const int SSL_RefereeRemoteControlReply::kOutcomeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_RefereeRemoteControlReply::SSL_RefereeRemoteControlReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rcon_2eproto::scc_info_SSL_RefereeRemoteControlReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_RefereeRemoteControlReply)
}
SSL_RefereeRemoteControlReply::SSL_RefereeRemoteControlReply(const SSL_RefereeRemoteControlReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&outcome_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(outcome_));
  // @@protoc_insertion_point(copy_constructor:SSL_RefereeRemoteControlReply)
}

void SSL_RefereeRemoteControlReply::SharedCtor() {
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outcome_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(outcome_));
}

SSL_RefereeRemoteControlReply::~SSL_RefereeRemoteControlReply() {
  // @@protoc_insertion_point(destructor:SSL_RefereeRemoteControlReply)
  SharedDtor();
}

void SSL_RefereeRemoteControlReply::SharedDtor() {
}

void SSL_RefereeRemoteControlReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_RefereeRemoteControlReply::descriptor() {
  ::protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rcon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_RefereeRemoteControlReply& SSL_RefereeRemoteControlReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rcon_2eproto::scc_info_SSL_RefereeRemoteControlReply.base);
  return *internal_default_instance();
}


void SSL_RefereeRemoteControlReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_RefereeRemoteControlReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&outcome_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(outcome_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_RefereeRemoteControlReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_RefereeRemoteControlReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_RefereeRemoteControlReply_Outcome_IsValid(value)) {
            set_outcome(static_cast< ::SSL_RefereeRemoteControlReply_Outcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_RefereeRemoteControlReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_RefereeRemoteControlReply)
  return false;
#undef DO_
}

void SSL_RefereeRemoteControlReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_RefereeRemoteControlReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->outcome(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_RefereeRemoteControlReply)
}

::google::protobuf::uint8* SSL_RefereeRemoteControlReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_RefereeRemoteControlReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->outcome(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_RefereeRemoteControlReply)
  return target;
}

size_t SSL_RefereeRemoteControlReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_RefereeRemoteControlReply)
  size_t total_size = 0;

  if (has_message_id()) {
    // required uint32 message_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_id());
  }

  if (has_outcome()) {
    // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->outcome());
  }

  return total_size;
}
size_t SSL_RefereeRemoteControlReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_RefereeRemoteControlReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 message_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_id());

    // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->outcome());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_RefereeRemoteControlReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_RefereeRemoteControlReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_RefereeRemoteControlReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_RefereeRemoteControlReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_RefereeRemoteControlReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_RefereeRemoteControlReply)
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlReply::MergeFrom(const SSL_RefereeRemoteControlReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_RefereeRemoteControlReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      outcome_ = from.outcome_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_RefereeRemoteControlReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_RefereeRemoteControlReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlReply::CopyFrom(const SSL_RefereeRemoteControlReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_RefereeRemoteControlReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SSL_RefereeRemoteControlReply::Swap(SSL_RefereeRemoteControlReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_RefereeRemoteControlReply::InternalSwap(SSL_RefereeRemoteControlReply* other) {
  using std::swap;
  swap(message_id_, other->message_id_);
  swap(outcome_, other->outcome_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_RefereeRemoteControlReply::GetMetadata() const {
  protobuf_rcon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rcon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_RefereeRemoteControlRequest_CardInfo* Arena::CreateMaybeMessage< ::SSL_RefereeRemoteControlRequest_CardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_RefereeRemoteControlRequest_CardInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_RefereeRemoteControlRequest* Arena::CreateMaybeMessage< ::SSL_RefereeRemoteControlRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_RefereeRemoteControlRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_RefereeRemoteControlReply* Arena::CreateMaybeMessage< ::SSL_RefereeRemoteControlReply >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_RefereeRemoteControlReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
