// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon.proto

#ifndef PROTOBUF_INCLUDED_rcon_2eproto
#define PROTOBUF_INCLUDED_rcon_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "referee.pb.h"
#include "game_event.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rcon_2eproto 

namespace protobuf_rcon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rcon_2eproto
class SSL_RefereeRemoteControlReply;
class SSL_RefereeRemoteControlReplyDefaultTypeInternal;
extern SSL_RefereeRemoteControlReplyDefaultTypeInternal _SSL_RefereeRemoteControlReply_default_instance_;
class SSL_RefereeRemoteControlRequest;
class SSL_RefereeRemoteControlRequestDefaultTypeInternal;
extern SSL_RefereeRemoteControlRequestDefaultTypeInternal _SSL_RefereeRemoteControlRequest_default_instance_;
class SSL_RefereeRemoteControlRequest_CardInfo;
class SSL_RefereeRemoteControlRequest_CardInfoDefaultTypeInternal;
extern SSL_RefereeRemoteControlRequest_CardInfoDefaultTypeInternal _SSL_RefereeRemoteControlRequest_CardInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::SSL_RefereeRemoteControlReply* Arena::CreateMaybeMessage<::SSL_RefereeRemoteControlReply>(Arena*);
template<> ::SSL_RefereeRemoteControlRequest* Arena::CreateMaybeMessage<::SSL_RefereeRemoteControlRequest>(Arena*);
template<> ::SSL_RefereeRemoteControlRequest_CardInfo* Arena::CreateMaybeMessage<::SSL_RefereeRemoteControlRequest_CardInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

enum SSL_RefereeRemoteControlRequest_CardInfo_CardType {
  SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_YELLOW = 0,
  SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_RED = 1
};
bool SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(int value);
const SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MIN = SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_YELLOW;
const SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MAX = SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_RED;
const int SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_ARRAYSIZE = SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor();
inline const ::std::string& SSL_RefereeRemoteControlRequest_CardInfo_CardType_Name(SSL_RefereeRemoteControlRequest_CardInfo_CardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor(), value);
}
inline bool SSL_RefereeRemoteControlRequest_CardInfo_CardType_Parse(
    const ::std::string& name, SSL_RefereeRemoteControlRequest_CardInfo_CardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSL_RefereeRemoteControlRequest_CardInfo_CardType>(
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor(), name, value);
}
enum SSL_RefereeRemoteControlRequest_CardInfo_CardTeam {
  SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_YELLOW = 0,
  SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_BLUE = 1
};
bool SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(int value);
const SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MIN = SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_YELLOW;
const SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MAX = SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_BLUE;
const int SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_ARRAYSIZE = SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor();
inline const ::std::string& SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Name(SSL_RefereeRemoteControlRequest_CardInfo_CardTeam value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor(), value);
}
inline bool SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Parse(
    const ::std::string& name, SSL_RefereeRemoteControlRequest_CardInfo_CardTeam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSL_RefereeRemoteControlRequest_CardInfo_CardTeam>(
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor(), name, value);
}
enum SSL_RefereeRemoteControlReply_Outcome {
  SSL_RefereeRemoteControlReply_Outcome_OK = 0,
  SSL_RefereeRemoteControlReply_Outcome_MULTIPLE_ACTIONS = 1,
  SSL_RefereeRemoteControlReply_Outcome_BAD_STAGE = 2,
  SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND = 3,
  SSL_RefereeRemoteControlReply_Outcome_BAD_DESIGNATED_POSITION = 4,
  SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND_COUNTER = 5,
  SSL_RefereeRemoteControlReply_Outcome_BAD_CARD = 6,
  SSL_RefereeRemoteControlReply_Outcome_NO_MAJORITY = 7,
  SSL_RefereeRemoteControlReply_Outcome_COMMUNICATION_FAILED = 8
};
bool SSL_RefereeRemoteControlReply_Outcome_IsValid(int value);
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply_Outcome_Outcome_MIN = SSL_RefereeRemoteControlReply_Outcome_OK;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply_Outcome_Outcome_MAX = SSL_RefereeRemoteControlReply_Outcome_COMMUNICATION_FAILED;
const int SSL_RefereeRemoteControlReply_Outcome_Outcome_ARRAYSIZE = SSL_RefereeRemoteControlReply_Outcome_Outcome_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlReply_Outcome_descriptor();
inline const ::std::string& SSL_RefereeRemoteControlReply_Outcome_Name(SSL_RefereeRemoteControlReply_Outcome value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSL_RefereeRemoteControlReply_Outcome_descriptor(), value);
}
inline bool SSL_RefereeRemoteControlReply_Outcome_Parse(
    const ::std::string& name, SSL_RefereeRemoteControlReply_Outcome* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSL_RefereeRemoteControlReply_Outcome>(
    SSL_RefereeRemoteControlReply_Outcome_descriptor(), name, value);
}
// ===================================================================

class SSL_RefereeRemoteControlRequest_CardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_RefereeRemoteControlRequest.CardInfo) */ {
 public:
  SSL_RefereeRemoteControlRequest_CardInfo();
  virtual ~SSL_RefereeRemoteControlRequest_CardInfo();

  SSL_RefereeRemoteControlRequest_CardInfo(const SSL_RefereeRemoteControlRequest_CardInfo& from);

  inline SSL_RefereeRemoteControlRequest_CardInfo& operator=(const SSL_RefereeRemoteControlRequest_CardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SSL_RefereeRemoteControlRequest_CardInfo(SSL_RefereeRemoteControlRequest_CardInfo&& from) noexcept
    : SSL_RefereeRemoteControlRequest_CardInfo() {
    *this = ::std::move(from);
  }

  inline SSL_RefereeRemoteControlRequest_CardInfo& operator=(SSL_RefereeRemoteControlRequest_CardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_RefereeRemoteControlRequest_CardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_RefereeRemoteControlRequest_CardInfo* internal_default_instance() {
    return reinterpret_cast<const SSL_RefereeRemoteControlRequest_CardInfo*>(
               &_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SSL_RefereeRemoteControlRequest_CardInfo* other);
  friend void swap(SSL_RefereeRemoteControlRequest_CardInfo& a, SSL_RefereeRemoteControlRequest_CardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSL_RefereeRemoteControlRequest_CardInfo* New() const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest_CardInfo>(NULL);
  }

  SSL_RefereeRemoteControlRequest_CardInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest_CardInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from);
  void MergeFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_RefereeRemoteControlRequest_CardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SSL_RefereeRemoteControlRequest_CardInfo_CardType CardType;
  static const CardType CARD_YELLOW =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_YELLOW;
  static const CardType CARD_RED =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_RED;
  static inline bool CardType_IsValid(int value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(value);
  }
  static const CardType CardType_MIN =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MIN;
  static const CardType CardType_MAX =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MAX;
  static const int CardType_ARRAYSIZE =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CardType_descriptor() {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor();
  }
  static inline const ::std::string& CardType_Name(CardType value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_Name(value);
  }
  static inline bool CardType_Parse(const ::std::string& name,
      CardType* value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_Parse(name, value);
  }

  typedef SSL_RefereeRemoteControlRequest_CardInfo_CardTeam CardTeam;
  static const CardTeam TEAM_YELLOW =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_YELLOW;
  static const CardTeam TEAM_BLUE =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_BLUE;
  static inline bool CardTeam_IsValid(int value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(value);
  }
  static const CardTeam CardTeam_MIN =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MIN;
  static const CardTeam CardTeam_MAX =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MAX;
  static const int CardTeam_ARRAYSIZE =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CardTeam_descriptor() {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor();
  }
  static inline const ::std::string& CardTeam_Name(CardTeam value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Name(value);
  }
  static inline bool CardTeam_Parse(const ::std::string& name,
      CardTeam* value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SSL_RefereeRemoteControlRequest_CardInfo_CardType type() const;
  void set_type(::SSL_RefereeRemoteControlRequest_CardInfo_CardType value);

  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam team() const;
  void set_team(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam value);

  // @@protoc_insertion_point(class_scope:SSL_RefereeRemoteControlRequest.CardInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_team();
  void clear_has_team();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  int team_;
  friend struct ::protobuf_rcon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SSL_RefereeRemoteControlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_RefereeRemoteControlRequest) */ {
 public:
  SSL_RefereeRemoteControlRequest();
  virtual ~SSL_RefereeRemoteControlRequest();

  SSL_RefereeRemoteControlRequest(const SSL_RefereeRemoteControlRequest& from);

  inline SSL_RefereeRemoteControlRequest& operator=(const SSL_RefereeRemoteControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SSL_RefereeRemoteControlRequest(SSL_RefereeRemoteControlRequest&& from) noexcept
    : SSL_RefereeRemoteControlRequest() {
    *this = ::std::move(from);
  }

  inline SSL_RefereeRemoteControlRequest& operator=(SSL_RefereeRemoteControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_RefereeRemoteControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_RefereeRemoteControlRequest* internal_default_instance() {
    return reinterpret_cast<const SSL_RefereeRemoteControlRequest*>(
               &_SSL_RefereeRemoteControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SSL_RefereeRemoteControlRequest* other);
  friend void swap(SSL_RefereeRemoteControlRequest& a, SSL_RefereeRemoteControlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSL_RefereeRemoteControlRequest* New() const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest>(NULL);
  }

  SSL_RefereeRemoteControlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SSL_RefereeRemoteControlRequest& from);
  void MergeFrom(const SSL_RefereeRemoteControlRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_RefereeRemoteControlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SSL_RefereeRemoteControlRequest_CardInfo CardInfo;

  // accessors -------------------------------------------------------

  // optional string implementation_id = 7;
  bool has_implementation_id() const;
  void clear_implementation_id();
  static const int kImplementationIdFieldNumber = 7;
  const ::std::string& implementation_id() const;
  void set_implementation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_implementation_id(::std::string&& value);
  #endif
  void set_implementation_id(const char* value);
  void set_implementation_id(const char* value, size_t size);
  ::std::string* mutable_implementation_id();
  ::std::string* release_implementation_id();
  void set_allocated_implementation_id(::std::string* implementation_id);

  // optional .SSL_Referee.Point designated_position = 4;
  bool has_designated_position() const;
  void clear_designated_position();
  static const int kDesignatedPositionFieldNumber = 4;
  private:
  const ::SSL_Referee_Point& _internal_designated_position() const;
  public:
  const ::SSL_Referee_Point& designated_position() const;
  ::SSL_Referee_Point* release_designated_position();
  ::SSL_Referee_Point* mutable_designated_position();
  void set_allocated_designated_position(::SSL_Referee_Point* designated_position);

  // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 5;
  private:
  const ::SSL_RefereeRemoteControlRequest_CardInfo& _internal_card() const;
  public:
  const ::SSL_RefereeRemoteControlRequest_CardInfo& card() const;
  ::SSL_RefereeRemoteControlRequest_CardInfo* release_card();
  ::SSL_RefereeRemoteControlRequest_CardInfo* mutable_card();
  void set_allocated_card(::SSL_RefereeRemoteControlRequest_CardInfo* card);

  // optional .SSL_Referee_Game_Event gameEvent = 8;
  bool has_gameevent() const;
  void clear_gameevent();
  static const int kGameEventFieldNumber = 8;
  private:
  const ::SSL_Referee_Game_Event& _internal_gameevent() const;
  public:
  const ::SSL_Referee_Game_Event& gameevent() const;
  ::SSL_Referee_Game_Event* release_gameevent();
  ::SSL_Referee_Game_Event* mutable_gameevent();
  void set_allocated_gameevent(::SSL_Referee_Game_Event* gameevent);

  // required uint32 message_id = 1;
  bool has_message_id() const;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  ::google::protobuf::uint32 message_id() const;
  void set_message_id(::google::protobuf::uint32 value);

  // optional .SSL_Referee.Stage stage = 2;
  bool has_stage() const;
  void clear_stage();
  static const int kStageFieldNumber = 2;
  ::SSL_Referee_Stage stage() const;
  void set_stage(::SSL_Referee_Stage value);

  // optional .SSL_Referee.Command command = 3;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  ::SSL_Referee_Command command() const;
  void set_command(::SSL_Referee_Command value);

  // optional uint32 last_command_counter = 6;
  bool has_last_command_counter() const;
  void clear_last_command_counter();
  static const int kLastCommandCounterFieldNumber = 6;
  ::google::protobuf::uint32 last_command_counter() const;
  void set_last_command_counter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SSL_RefereeRemoteControlRequest)
 private:
  void set_has_message_id();
  void clear_has_message_id();
  void set_has_stage();
  void clear_has_stage();
  void set_has_command();
  void clear_has_command();
  void set_has_designated_position();
  void clear_has_designated_position();
  void set_has_card();
  void clear_has_card();
  void set_has_last_command_counter();
  void clear_has_last_command_counter();
  void set_has_implementation_id();
  void clear_has_implementation_id();
  void set_has_gameevent();
  void clear_has_gameevent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr implementation_id_;
  ::SSL_Referee_Point* designated_position_;
  ::SSL_RefereeRemoteControlRequest_CardInfo* card_;
  ::SSL_Referee_Game_Event* gameevent_;
  ::google::protobuf::uint32 message_id_;
  int stage_;
  int command_;
  ::google::protobuf::uint32 last_command_counter_;
  friend struct ::protobuf_rcon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SSL_RefereeRemoteControlReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_RefereeRemoteControlReply) */ {
 public:
  SSL_RefereeRemoteControlReply();
  virtual ~SSL_RefereeRemoteControlReply();

  SSL_RefereeRemoteControlReply(const SSL_RefereeRemoteControlReply& from);

  inline SSL_RefereeRemoteControlReply& operator=(const SSL_RefereeRemoteControlReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SSL_RefereeRemoteControlReply(SSL_RefereeRemoteControlReply&& from) noexcept
    : SSL_RefereeRemoteControlReply() {
    *this = ::std::move(from);
  }

  inline SSL_RefereeRemoteControlReply& operator=(SSL_RefereeRemoteControlReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_RefereeRemoteControlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_RefereeRemoteControlReply* internal_default_instance() {
    return reinterpret_cast<const SSL_RefereeRemoteControlReply*>(
               &_SSL_RefereeRemoteControlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SSL_RefereeRemoteControlReply* other);
  friend void swap(SSL_RefereeRemoteControlReply& a, SSL_RefereeRemoteControlReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSL_RefereeRemoteControlReply* New() const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlReply>(NULL);
  }

  SSL_RefereeRemoteControlReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SSL_RefereeRemoteControlReply& from);
  void MergeFrom(const SSL_RefereeRemoteControlReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_RefereeRemoteControlReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SSL_RefereeRemoteControlReply_Outcome Outcome;
  static const Outcome OK =
    SSL_RefereeRemoteControlReply_Outcome_OK;
  static const Outcome MULTIPLE_ACTIONS =
    SSL_RefereeRemoteControlReply_Outcome_MULTIPLE_ACTIONS;
  static const Outcome BAD_STAGE =
    SSL_RefereeRemoteControlReply_Outcome_BAD_STAGE;
  static const Outcome BAD_COMMAND =
    SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND;
  static const Outcome BAD_DESIGNATED_POSITION =
    SSL_RefereeRemoteControlReply_Outcome_BAD_DESIGNATED_POSITION;
  static const Outcome BAD_COMMAND_COUNTER =
    SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND_COUNTER;
  static const Outcome BAD_CARD =
    SSL_RefereeRemoteControlReply_Outcome_BAD_CARD;
  static const Outcome NO_MAJORITY =
    SSL_RefereeRemoteControlReply_Outcome_NO_MAJORITY;
  static const Outcome COMMUNICATION_FAILED =
    SSL_RefereeRemoteControlReply_Outcome_COMMUNICATION_FAILED;
  static inline bool Outcome_IsValid(int value) {
    return SSL_RefereeRemoteControlReply_Outcome_IsValid(value);
  }
  static const Outcome Outcome_MIN =
    SSL_RefereeRemoteControlReply_Outcome_Outcome_MIN;
  static const Outcome Outcome_MAX =
    SSL_RefereeRemoteControlReply_Outcome_Outcome_MAX;
  static const int Outcome_ARRAYSIZE =
    SSL_RefereeRemoteControlReply_Outcome_Outcome_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Outcome_descriptor() {
    return SSL_RefereeRemoteControlReply_Outcome_descriptor();
  }
  static inline const ::std::string& Outcome_Name(Outcome value) {
    return SSL_RefereeRemoteControlReply_Outcome_Name(value);
  }
  static inline bool Outcome_Parse(const ::std::string& name,
      Outcome* value) {
    return SSL_RefereeRemoteControlReply_Outcome_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 message_id = 1;
  bool has_message_id() const;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  ::google::protobuf::uint32 message_id() const;
  void set_message_id(::google::protobuf::uint32 value);

  // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
  bool has_outcome() const;
  void clear_outcome();
  static const int kOutcomeFieldNumber = 2;
  ::SSL_RefereeRemoteControlReply_Outcome outcome() const;
  void set_outcome(::SSL_RefereeRemoteControlReply_Outcome value);

  // @@protoc_insertion_point(class_scope:SSL_RefereeRemoteControlReply)
 private:
  void set_has_message_id();
  void clear_has_message_id();
  void set_has_outcome();
  void clear_has_outcome();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 message_id_;
  int outcome_;
  friend struct ::protobuf_rcon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSL_RefereeRemoteControlRequest_CardInfo

// required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
inline bool SSL_RefereeRemoteControlRequest_CardInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::type() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.CardInfo.type)
  return static_cast< ::SSL_RefereeRemoteControlRequest_CardInfo_CardType >(type_);
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::set_type(::SSL_RefereeRemoteControlRequest_CardInfo_CardType value) {
  assert(::SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.CardInfo.type)
}

// required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
inline bool SSL_RefereeRemoteControlRequest_CardInfo::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::team() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.CardInfo.team)
  return static_cast< ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam >(team_);
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::set_team(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam value) {
  assert(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.CardInfo.team)
}

// -------------------------------------------------------------------

// SSL_RefereeRemoteControlRequest

// required uint32 message_id = 1;
inline bool SSL_RefereeRemoteControlRequest::has_message_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_message_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_RefereeRemoteControlRequest::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
inline ::google::protobuf::uint32 SSL_RefereeRemoteControlRequest::message_id() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.message_id)
  return message_id_;
}
inline void SSL_RefereeRemoteControlRequest::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.message_id)
}

// optional .SSL_Referee.Stage stage = 2;
inline bool SSL_RefereeRemoteControlRequest::has_stage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_stage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_stage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SSL_RefereeRemoteControlRequest::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::SSL_Referee_Stage SSL_RefereeRemoteControlRequest::stage() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.stage)
  return static_cast< ::SSL_Referee_Stage >(stage_);
}
inline void SSL_RefereeRemoteControlRequest::set_stage(::SSL_Referee_Stage value) {
  assert(::SSL_Referee_Stage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.stage)
}

// optional .SSL_Referee.Command command = 3;
inline bool SSL_RefereeRemoteControlRequest::has_command() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_command() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_command() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SSL_RefereeRemoteControlRequest::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::SSL_Referee_Command SSL_RefereeRemoteControlRequest::command() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.command)
  return static_cast< ::SSL_Referee_Command >(command_);
}
inline void SSL_RefereeRemoteControlRequest::set_command(::SSL_Referee_Command value) {
  assert(::SSL_Referee_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.command)
}

// optional .SSL_Referee.Point designated_position = 4;
inline bool SSL_RefereeRemoteControlRequest::has_designated_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_designated_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_designated_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SSL_Referee_Point& SSL_RefereeRemoteControlRequest::_internal_designated_position() const {
  return *designated_position_;
}
inline const ::SSL_Referee_Point& SSL_RefereeRemoteControlRequest::designated_position() const {
  const ::SSL_Referee_Point* p = designated_position_;
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.designated_position)
  return p != NULL ? *p : *reinterpret_cast<const ::SSL_Referee_Point*>(
      &::_SSL_Referee_Point_default_instance_);
}
inline ::SSL_Referee_Point* SSL_RefereeRemoteControlRequest::release_designated_position() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.designated_position)
  clear_has_designated_position();
  ::SSL_Referee_Point* temp = designated_position_;
  designated_position_ = NULL;
  return temp;
}
inline ::SSL_Referee_Point* SSL_RefereeRemoteControlRequest::mutable_designated_position() {
  set_has_designated_position();
  if (designated_position_ == NULL) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Point>(GetArenaNoVirtual());
    designated_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.designated_position)
  return designated_position_;
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_designated_position(::SSL_Referee_Point* designated_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(designated_position_);
  }
  if (designated_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      designated_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, designated_position, submessage_arena);
    }
    set_has_designated_position();
  } else {
    clear_has_designated_position();
  }
  designated_position_ = designated_position;
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.designated_position)
}

// optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
inline bool SSL_RefereeRemoteControlRequest::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_RefereeRemoteControlRequest::clear_card() {
  if (card_ != NULL) card_->Clear();
  clear_has_card();
}
inline const ::SSL_RefereeRemoteControlRequest_CardInfo& SSL_RefereeRemoteControlRequest::_internal_card() const {
  return *card_;
}
inline const ::SSL_RefereeRemoteControlRequest_CardInfo& SSL_RefereeRemoteControlRequest::card() const {
  const ::SSL_RefereeRemoteControlRequest_CardInfo* p = card_;
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.card)
  return p != NULL ? *p : *reinterpret_cast<const ::SSL_RefereeRemoteControlRequest_CardInfo*>(
      &::_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_);
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo* SSL_RefereeRemoteControlRequest::release_card() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.card)
  clear_has_card();
  ::SSL_RefereeRemoteControlRequest_CardInfo* temp = card_;
  card_ = NULL;
  return temp;
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo* SSL_RefereeRemoteControlRequest::mutable_card() {
  set_has_card();
  if (card_ == NULL) {
    auto* p = CreateMaybeMessage<::SSL_RefereeRemoteControlRequest_CardInfo>(GetArenaNoVirtual());
    card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.card)
  return card_;
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_card(::SSL_RefereeRemoteControlRequest_CardInfo* card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete card_;
  }
  if (card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    set_has_card();
  } else {
    clear_has_card();
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.card)
}

// optional uint32 last_command_counter = 6;
inline bool SSL_RefereeRemoteControlRequest::has_last_command_counter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_last_command_counter() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_last_command_counter() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SSL_RefereeRemoteControlRequest::clear_last_command_counter() {
  last_command_counter_ = 0u;
  clear_has_last_command_counter();
}
inline ::google::protobuf::uint32 SSL_RefereeRemoteControlRequest::last_command_counter() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.last_command_counter)
  return last_command_counter_;
}
inline void SSL_RefereeRemoteControlRequest::set_last_command_counter(::google::protobuf::uint32 value) {
  set_has_last_command_counter();
  last_command_counter_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.last_command_counter)
}

// optional string implementation_id = 7;
inline bool SSL_RefereeRemoteControlRequest::has_implementation_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_implementation_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_implementation_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_RefereeRemoteControlRequest::clear_implementation_id() {
  implementation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_implementation_id();
}
inline const ::std::string& SSL_RefereeRemoteControlRequest::implementation_id() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.implementation_id)
  return implementation_id_.GetNoArena();
}
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(const ::std::string& value) {
  set_has_implementation_id();
  implementation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.implementation_id)
}
#if LANG_CXX11
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(::std::string&& value) {
  set_has_implementation_id();
  implementation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_RefereeRemoteControlRequest.implementation_id)
}
#endif
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_implementation_id();
  implementation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_RefereeRemoteControlRequest.implementation_id)
}
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(const char* value, size_t size) {
  set_has_implementation_id();
  implementation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_RefereeRemoteControlRequest.implementation_id)
}
inline ::std::string* SSL_RefereeRemoteControlRequest::mutable_implementation_id() {
  set_has_implementation_id();
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.implementation_id)
  return implementation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSL_RefereeRemoteControlRequest::release_implementation_id() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.implementation_id)
  if (!has_implementation_id()) {
    return NULL;
  }
  clear_has_implementation_id();
  return implementation_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_implementation_id(::std::string* implementation_id) {
  if (implementation_id != NULL) {
    set_has_implementation_id();
  } else {
    clear_has_implementation_id();
  }
  implementation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), implementation_id);
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.implementation_id)
}

// optional .SSL_Referee_Game_Event gameEvent = 8;
inline bool SSL_RefereeRemoteControlRequest::has_gameevent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_RefereeRemoteControlRequest::set_has_gameevent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_RefereeRemoteControlRequest::clear_has_gameevent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::SSL_Referee_Game_Event& SSL_RefereeRemoteControlRequest::_internal_gameevent() const {
  return *gameevent_;
}
inline const ::SSL_Referee_Game_Event& SSL_RefereeRemoteControlRequest::gameevent() const {
  const ::SSL_Referee_Game_Event* p = gameevent_;
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.gameEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::SSL_Referee_Game_Event*>(
      &::_SSL_Referee_Game_Event_default_instance_);
}
inline ::SSL_Referee_Game_Event* SSL_RefereeRemoteControlRequest::release_gameevent() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.gameEvent)
  clear_has_gameevent();
  ::SSL_Referee_Game_Event* temp = gameevent_;
  gameevent_ = NULL;
  return temp;
}
inline ::SSL_Referee_Game_Event* SSL_RefereeRemoteControlRequest::mutable_gameevent() {
  set_has_gameevent();
  if (gameevent_ == NULL) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Game_Event>(GetArenaNoVirtual());
    gameevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.gameEvent)
  return gameevent_;
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_gameevent(::SSL_Referee_Game_Event* gameevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gameevent_);
  }
  if (gameevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gameevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gameevent, submessage_arena);
    }
    set_has_gameevent();
  } else {
    clear_has_gameevent();
  }
  gameevent_ = gameevent;
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.gameEvent)
}

// -------------------------------------------------------------------

// SSL_RefereeRemoteControlReply

// required uint32 message_id = 1;
inline bool SSL_RefereeRemoteControlReply::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_RefereeRemoteControlReply::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_RefereeRemoteControlReply::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_RefereeRemoteControlReply::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
inline ::google::protobuf::uint32 SSL_RefereeRemoteControlReply::message_id() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlReply.message_id)
  return message_id_;
}
inline void SSL_RefereeRemoteControlReply::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlReply.message_id)
}

// required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
inline bool SSL_RefereeRemoteControlReply::has_outcome() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_RefereeRemoteControlReply::set_has_outcome() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_RefereeRemoteControlReply::clear_has_outcome() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_RefereeRemoteControlReply::clear_outcome() {
  outcome_ = 0;
  clear_has_outcome();
}
inline ::SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::outcome() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlReply.outcome)
  return static_cast< ::SSL_RefereeRemoteControlReply_Outcome >(outcome_);
}
inline void SSL_RefereeRemoteControlReply::set_outcome(::SSL_RefereeRemoteControlReply_Outcome value) {
  assert(::SSL_RefereeRemoteControlReply_Outcome_IsValid(value));
  set_has_outcome();
  outcome_ = value;
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlReply.outcome)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SSL_RefereeRemoteControlRequest_CardInfo_CardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_RefereeRemoteControlRequest_CardInfo_CardType>() {
  return ::SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor();
}
template <> struct is_proto_enum< ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam>() {
  return ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor();
}
template <> struct is_proto_enum< ::SSL_RefereeRemoteControlReply_Outcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_RefereeRemoteControlReply_Outcome>() {
  return ::SSL_RefereeRemoteControlReply_Outcome_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rcon_2eproto
